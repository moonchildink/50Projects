<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ScrollAnimation</title>
</head>
<style>
    * {
        margin: 0;
        box-sizing: border-box;
        /*overflow-x: hidden;*/
    }
    body{
        background-color:blanchedalmond;
        margin: 0;
        overflow-x: hidden;
    }
    article {
        height:100vh;
        /*设置了auto的话应该是由内部元素撑起盒子的大小*/
        /*width:auto;*/
        margin:0 auto;
    }
    header h1{
        font-size: 40px;
        font-family: 'JetBrains Mono','Consolas';
        text-align: center;
    }
    .content {
        background-color: #038580;
        width:500px;
        height:400px;
        border-radius: 40px;
        justify-items: center;
        text-align: center;
        line-height: 400px;
        font-size: 40px;
        font-weight: bold;
        color: white;
        box-shadow: 25px 25px 11px -13px #C9C9C9;
        margin:20px auto;
        font-family: 'JetBrains Mono','Consolas';
        /*添加移动的动画,原页面的动画效果好象是根据用户鼠标滑动滑动的速度来进行调整的*/
        transition: all 1000ms linear;
    }

    /*目前的问题出在移除了hide之后元素失去了relative属性,应该始终保留relative属性,*/
    /*但是在没有改变元素relative属性的情况下还是无法加载出过渡效果*/
    .hide {
        transition: all 700ms ease-in;
        position: relative;
    }
    .hide-left {
        /*transition: all 700ms ease-in;*/
        left:300%;
    }
    .hide-right {
        /*transition: all 700ms ease-in;*/
        right:300%;
    }

</style>
<body>
    <article>
        <header>
            <h1>
                Scroll to see the animation
            </h1>
        </header>
        <div class="content" >
            <p>
                Content
            </p>
        </div>
        <div class="content hide" id = "second-box">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-left">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-right">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-left">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-right">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-left">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-right">
            <p>
                Content
            </p>
        </div>
        <div class="content hide hide-left">
            <p>
                Content
            </p>
        </div>


    </article>
</body>
<script>
    /**
     * 主要思路:
     *      *检测用户滚动事件
     *      *在第一个盒子底部还要添加一些盒子,但是这些盒子在正常状态下隐藏也页面之外
     *      *当检测到用户滚动页面的时候就向页面中央添加这些盒子
     */
    const divs = document.getElementsByClassName('content');//目前divs一共有九个元素
    //我们只需要获取后七个元素
    const startPosition = 1; //从第三个元素开始使用
    // for (div in divs){
    //     div.addEventListener('click',()=>{
    //     })
    // }

    document.addEventListener('scroll',()=>{
        let scrollTop =
            document.documentElement.scrollTop || document.body.scrollTop;
        console.log('scrollTop:'+scrollTop);
        //每两个元素之间的间距是20px,那么
        let count  = Math.floor(scrollTop / 400);
        console.log(count);
        //让元素显示
        for(let i = startPosition;i<=count+startPosition;i++){
            divs[i].classList.remove('hide-left');
            divs[i].classList.remove('hide-right')
        }
        for(let i = 8;i>count+1;i--){
            // divs[i].classList.add('hide');
            if(i % 2== 0){
                divs[i].classList.add('hide-left');
            }
            else
            {
                divs[i].classList.add('hide-right');
            }
        }
    })
</script>
</html>
